"""
Copyright (c) 2019, Jairus Martin.

Distributed under the terms of the GPL v3 License.

The full license is in the file LICENSE, distributed with this software.

Created on May 25, 2019

@author: jrm
"""
from enaml.widgets.api import Container, Form, Label, ObjectCombo, Field, PushButton, CheckBox
from enaml.layout.api import hbox
from enaml.qt.QtWidgets import QApplication, QFileDialog
from enamlx.widgets.api import DoubleSpinBox


enamldef JobSettingsPage(Container):
    padding = 0
    attr model
    Form:
        Label:
            text = QApplication.translate("settings", "Default Units")
        ObjectCombo:
            items = list(sorted(model.get_member('units').items))
            selected := model.units
        Label:
            text = QApplication.translate("settings", "Optimizer timeout")
        DoubleSpinBox:
            suffix = ' sec'
            value := model.optimizer_timeout
        Label:
            text = QApplication.translate("settings", "Working Directory Memory")
        CheckBox:
            text = QApplication.translate("settings", "Remember last browsed directory")
            checked := model.enable_working_directory_memory
            tool_tip = QApplication.translate("settings", "Remember where you last browsed for files (disable for original behavior)")
        Label:
            text = QApplication.translate("settings", "Default working directory")
            enabled << model.enable_working_directory_memory
        Container:
            enabled << model.enable_working_directory_memory
            constraints = [hbox(field_dir, btn_browse)]
            Field: field_dir:
                text := model.default_working_directory
                tool_tip = QApplication.translate("settings", "Default directory for file dialogs")  
            PushButton: btn_browse:
                text = QApplication.translate("settings", "Browse...")
                clicked ::
                    path = QFileDialog.getExistingDirectory(
                        None, 
                        QApplication.translate("settings", "Select Default Working Directory"),
                        model.default_working_directory or ""
                    )
                    if path:
                        model.default_working_directory = path
        Label:
            text = QApplication.translate("settings", "Last browse directory")
            enabled << model.enable_working_directory_memory
        Container:
            enabled << model.enable_working_directory_memory
            constraints = [hbox(field_last, btn_clear)]
            Field: field_last:
                text := model.last_browse_directory
                read_only = True
                tool_tip = QApplication.translate("settings", "Last directory browsed to in file dialogs")
            PushButton: btn_clear:
                text = QApplication.translate("settings", "Clear")
                clicked ::
                    model.last_browse_directory = ""
